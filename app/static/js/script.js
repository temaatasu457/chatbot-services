let messageCount = 0;
let sessionStartTime = new Date();
let sessionId = Date.now().toString();
let currentLanguage = 'ru';

const translations = {
    ru: {
        title: "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç-–±–æ—Ç ü§ñ",
        subtitle: "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...",
        description: "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ª—é–±—É—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Bank ü´∂üèª",
        
        placeholder: "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å...",
        sendButton: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
        thinking: "–î—É–º–∞—é...",
        
        sessionStats: "–¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è",
        messagesSent: "–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:",
        sessionDuration: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:",
        
        welcomeMessage: "–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üòä",
        
        errorMessage: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    },
    kk: {
        title: "–¢–µ—Å—Ç—ñ–ª—ñ–∫ —á–∞—Ç-–±–æ—Ç ü§ñ",
        subtitle: "“ö–∞–∑—ñ—Ä–≥—ñ —É–∞“õ—ã—Ç—Ç–∞ “õ—ã–∑–º–µ—Ç –±–µ–ª—Å–µ–Ω–¥—ñ —Ç“Ø—Ä–¥–µ –∂–µ—Ç—ñ–ª–¥—ñ—Ä—ñ–ª—É–¥–µ...",
        description: "–ë“±–ª –±–æ—Ç Bank —Ç—É—Ä–∞–ª—ã –∫–µ–∑ –∫–µ–ª–≥–µ–Ω “õ—ã–∑—ã“õ—Ç—ã—Ä–∞—Ç—ã–Ω –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã “±—Å—ã–Ω–∞ –∞–ª–∞–¥—ã ü´∂üèª",

        placeholder: "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã “õ–æ–π—ã“£—ã–∑...",
        sendButton: "–ñ—ñ–±–µ—Ä—É",
        thinking: "–û–π–ª–∞–Ω—É–¥–∞...",
        
        sessionStats: "–ê“ì—ã–º–¥–∞“ì—ã —Å–µ—Å—Å–∏—è",
        messagesSent: "–ñ—ñ–±–µ—Ä—ñ–ª–≥–µ–Ω —Ö–∞–±–∞—Ä–ª–∞–º–∞–ª–∞—Ä:",
        sessionDuration: "–°–µ—Å—Å–∏—è “±–∑–∞“õ—Ç—ã“ì—ã:",
        
        welcomeMessage: "–ú–µ–Ω - AI –≤–∏—Ä—Ç—É–∞–ª–¥—ã –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω. –¢–∞–Ω—ã–º–∞–ª —Å“±—Ä–∞—É–ª–∞—Ä–¥—ã“£ –±—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ —Å—ñ–∑–¥—ñ –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞—Ç—ã–Ω—ã–Ω –∂–∞–∑—ã“£—ã–∑ üòä",
        
        errorMessage: "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, —Å“±—Ä–∞—É—ã“£—ã–∑–¥—ã ”©“£–¥–µ—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã."
    },
    en: {
        title: "Test chatbot ü§ñ",
        subtitle: "The service is currently being actively refined...",
        description: "This bot can provide you with any information about Bank you're interested in ü´∂üèª",
        
        placeholder: "Ask your question...",
        sendButton: "Send",
        thinking: "Thinking...",
        
        sessionStats: "Current Session",
        messagesSent: "Messages sent:",
        sessionDuration: "Session duration:",
        
        welcomeMessage: "I am AI virtual assistant. Choose one of the popular requests or write what interests you üòä",
        
        errorMessage: "Sorry, there was an error processing your request."
    }
};

function updateUIText() {
    console.log("Updating UI to language: " + currentLanguage);
    const text = translations[currentLanguage];
    
    document.querySelector('.header h1').textContent = text.title;
    document.querySelector('.header h2').textContent = text.subtitle;
    document.querySelector('.header p').textContent = text.description;
    
    document.getElementById('question').placeholder = text.placeholder;
    
    document.querySelector('.input-container button').textContent = text.sendButton;
    
    document.getElementById('thinking').textContent = text.thinking;
    
    document.querySelector('.stats h3').textContent = text.sessionStats;
    
    const msgCountLabel = document.querySelector('.stats p:nth-child(2)');
    msgCountLabel.innerHTML = text.messagesSent + ' <span id="messageCount">' + messageCount + '</span>';
    
    const sessionTimeLabel = document.querySelector('.stats p:nth-child(3)');
    sessionTimeLabel.innerHTML = text.sessionDuration + ' <span id="sessionTime">0:00</span>';
    
    console.log("UI language update completed");
}

function changeLanguage(lang) {
    console.log("Language change requested to: " + lang);
    
    currentLanguage = lang;
    
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.getElementById('lang-' + lang).classList.add('active');
    
    updateUIText();
    
    updateWelcomeMessage();
    
    console.log("Language changed to: " + lang);
}

function updateWelcomeMessage() {
    const welcomeMessageElement = document.getElementById('welcome-message');
    if (welcomeMessageElement) {
        welcomeMessageElement.innerHTML = marked.parse(translations[currentLanguage].welcomeMessage);
    } else {
        const firstAssistantMessage = document.querySelector('.assistant-message');
        if (firstAssistantMessage) {
            firstAssistantMessage.innerHTML = marked.parse(translations[currentLanguage].welcomeMessage);
        }
    }
}

function updateSessionTime() {
    const now = new Date();
    const diff = Math.floor((now - sessionStartTime) / 1000);
    const minutes = Math.floor(diff / 60);
    const seconds = diff % 60;
    const timeStr = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    const sessionTimeElement = document.getElementById('sessionTime');
    if (sessionTimeElement) {
        sessionTimeElement.textContent = timeStr;
    }
}

function addMessage(content, isUser, isWelcome = false) {
    const chatContainer = document.getElementById('chatContainer');
    const messageDiv = document.createElement('div');
    
    if (isWelcome) {
        messageDiv.className = `message welcome-message assistant-message`;
        messageDiv.id = 'welcome-message';
    } else {
        messageDiv.className = `message ${isUser ? 'user-message' : 'assistant-message'}`;
    }
    
    if (isUser) {
        messageDiv.textContent = content;
        messageCount++;
        const countElement = document.getElementById('messageCount'); 
        if (countElement) {
            countElement.textContent = messageCount;
        }
    } else {
        messageDiv.innerHTML = marked.parse(content);
    }
    
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function handleKeyPress(event) {
    if (event.key === 'Enter') {
        sendMessage();
    }
}

async function sendMessage() {
    const questionInput = document.getElementById('question');
    const question = questionInput.value.trim();
    
    if (!question) return;
    
    console.log("Sending message with language: " + currentLanguage);
    
    addMessage(question, true);
    questionInput.value = '';
    
    const thinking = document.getElementById('thinking');
    thinking.style.display = 'block';
    
    try {
        const response = await fetch('/chat/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                question: question,
                session_id: sessionId,
                language: currentLanguage
            })
        });
        
        const data = await response.json();
        
        thinking.style.display = 'none';
        addMessage(data.response, false);
        
    } catch (error) {
        thinking.style.display = 'none';
        addMessage(translations[currentLanguage].errorMessage, false);
        console.error('Error:', error);
    }
}

window.onload = function() {
    console.log("Window loaded, initializing...");
    
    setInterval(updateSessionTime, 1000);
    
    updateUIText();
    
    const chatContainer = document.getElementById('chatContainer');
    if (chatContainer) {
        chatContainer.innerHTML = '';
    }
    
    addMessage(translations[currentLanguage].welcomeMessage, false, true);
    
    console.log("Initialization complete");
};